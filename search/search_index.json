{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"api-reference/","title":"Api Reference","text":""},{"location":"api-reference/#stackonetoolset","title":"StackOneToolSet","text":"<p>The main class for accessing StackOne tools.</p>"},{"location":"api-reference/#constructor","title":"Constructor","text":"<pre><code>StackOneToolSet(\n    api_key: str | None = None,\n    account_id: str | None = None\n)\n</code></pre> <p>Parameters: - <code>api_key</code>: Optional API key. If not provided, uses <code>STACKONE_API_KEY</code> env variable - <code>account_id</code>: Optional account ID. If not provided, uses <code>STACKONE_ACCOUNT_ID</code> env variable</p>"},{"location":"api-reference/#methods","title":"Methods","text":""},{"location":"api-reference/#get_tools","title":"get_tools","text":"<pre><code>def get_tools(\n    vertical: str,\n    account_id: str | None = None\n) -&gt; Tools\n</code></pre> <p>Get tools for a specific vertical.</p> <p>Parameters: - <code>vertical</code>: The vertical to get tools for (e.g. \"hris\", \"crm\") - <code>account_id</code>: Optional account ID override. If not provided, uses the one from initialization</p> <p>Returns: - <code>Tools</code> instance containing available tools</p>"},{"location":"api-reference/#tools","title":"Tools","text":"<p>Container for Tool instances.</p>"},{"location":"api-reference/#methods_1","title":"Methods","text":""},{"location":"api-reference/#get_tool","title":"get_tool","text":"<pre><code>def get_tool(name: str) -&gt; BaseTool | None\n</code></pre> <p>Get a tool by its name.</p> <p>Parameters: - <code>name</code>: Name of the tool to get</p> <p>Returns: - <code>BaseTool</code> instance if found, None otherwise</p>"},{"location":"api-reference/#to_openai","title":"to_openai","text":"<pre><code>def to_openai() -&gt; list[dict]\n</code></pre> <p>Convert all tools to OpenAI function format.</p> <p>Returns: - List of tools in OpenAI function format</p>"},{"location":"api-reference/#basetool","title":"BaseTool","text":"<p>Base class for individual tools.</p>"},{"location":"api-reference/#methods_2","title":"Methods","text":""},{"location":"api-reference/#execute","title":"execute","text":"<pre><code>def execute(arguments: str | dict) -&gt; dict[str, Any]\n</code></pre> <p>Execute the tool with the given parameters.</p> <p>Parameters: - <code>arguments</code>: Either a JSON string or dict of arguments</p> <p>Returns: - Tool execution results</p>"},{"location":"api-reference/#to_openai_function","title":"to_openai_function","text":"<pre><code>def to_openai_function() -&gt; dict\n</code></pre> <p>Convert this tool to OpenAI's function format.</p> <p>Returns: - Tool definition in OpenAI function format</p> <pre><code># Example usage of the API\nfrom stackone_ai import StackOneToolSet\n\n# Initialize with environment variables\ntoolset = StackOneToolSet()\n\n# Get tools for HRIS vertical\ntools = toolset.get_tools(vertical=\"hris\")\n\n# Get a specific tool\nemployee_tool = tools.get_tool(\"get_employee\")\nif employee_tool:\n    # Execute the tool\n    result = employee_tool.execute({\"id\": \"employee123\"})\n\n    # Convert to OpenAI format\n    openai_function = employee_tool.to_openai_function()\n</code></pre>"},{"location":"basic-tool-usage/","title":"Basic Tool Usage","text":"<p>This example shows how to use StackOne tools.</p>"},{"location":"basic-tool-usage/#requirements","title":"Requirements","text":"<ul> <li>STACKONE_API_KEY</li> <li>STACKONE_ACCOUNT_ID</li> </ul> <pre><code>import os\n\nfrom dotenv import load_dotenv\nfrom stackone_ai import StackOneToolSet\n\n\ndef main():\n    # Load environment variables from .env\n    load_dotenv()\n\n    api_key = os.getenv(\"STACKONE_API_KEY\")\n    account_id = os.getenv(\"STACKONE_ACCOUNT_ID\")\n\n    if not api_key or not account_id:\n        raise ValueError(\"STACKONE_API_KEY or STACKONE_ACCOUNT_ID not found in .env file\")\n\n    # Initialize the toolset with your API key\n    toolset = StackOneToolSet(api_key=api_key)\n</code></pre>"},{"location":"basic-tool-usage/#using-tools","title":"Using Tools","text":"<pre><code>Once initialized, you can get tools for specific verticals:\n</code></pre> <pre><code># Get HRIS tools\n    tools = toolset.get_tools(vertical=\"hris\", account_id=account_id)\n</code></pre> <p>Then use specific tools by name:</p> <pre><code># Example: Get an employee by ID\n    try:\n        # The tool name comes from the x-speakeasy-name-override in the OpenAPI spec\n        employee_tool = tools.get_tool(\"get_employee\")\n        if employee_tool:\n            employees = employee_tool.execute({\"id\": \"c28xIQaWQ6MzM5MzczMDA2NzMzMzkwNzIwNA\"})\n            print(\"Employees retrieved:\", employees)\n    except Exception as e:\n        print(f\"Error getting employee: {e}\")\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre>"},{"location":"error-handling/","title":"Error Handling","text":"<pre><code>import os\n\nfrom dotenv import load_dotenv\nfrom stackone_ai import StackOneToolSet\n\n\ndef demonstrate_error_handling():\n    # Load environment variables from root .env\n    load_dotenv()\n\n    api_key = os.getenv(\"STACKONE_API_KEY\")\n    account_id = os.getenv(\"STACKONE_ACCOUNT_ID\")\n\n    if not api_key:\n        raise ValueError(\"STACKONE_API_KEY not found in .env file\")\n\n    toolset = StackOneToolSet(api_key=api_key)\n\n    # Example 1: Handle unknown vertical\n    try:\n        tools = toolset.get_tools(vertical=\"unknown_vertical\")\n        print(\"Tools for unknown vertical:\", tools)  # Will print empty dict\n    except Exception as e:\n        print(f\"Error getting tools: {e}\")\n\n    # Example 2: Handle API errors with account_id\n    tools = toolset.get_tools(vertical=\"crm\", account_id=account_id)\n\n    # Example of handling various API errors\n    try:\n        # Try with invalid ID\n        contacts_tool = tools.get_tool(\"get_contacts\")\n        if contacts_tool:\n            result = contacts_tool.execute({\"id\": \"invalid_id\"})\n    except Exception as e:\n        print(f\"API Error: {e}\")\n\n    # Example 3: Handle missing account ID\n    tools_no_account = toolset.get_tools(vertical=\"crm\")  # No account_id\n    try:\n        contacts_tool = tools_no_account.get_tool(\"get_contacts\")\n        if contacts_tool:\n            result = contacts_tool.execute({\"id\": \"123\"})\n            print(\"Result without account ID:\", result)\n    except Exception as e:\n        print(f\"Error when account ID is missing: {e}\")\n\n\nif __name__ == \"__main__\":\n    demonstrate_error_handling()\n</code></pre>"},{"location":"getting-started/","title":"Getting Started","text":""},{"location":"getting-started/#getting-started-with-stackone-ai","title":"Getting Started with StackOne AI","text":"<p>StackOne AI provides a unified interface for accessing various SaaS tools through AI-friendly APIs.</p>"},{"location":"getting-started/#installation","title":"Installation","text":"<p>Install StackOne AI using pip:</p> <pre><code>pip install stackone-ai\n</code></pre>"},{"location":"getting-started/#quick-start","title":"Quick Start","text":"<p>Here's a simple example to get you started:</p> <pre><code>import os\n\nfrom dotenv import load_dotenv\nfrom stackone_ai import StackOneToolSet\n\n\ndef quickstart():\n    # Load environment variables\n    load_dotenv()\n\n    api_key = os.getenv(\"STACKONE_API_KEY\")\n    account_id = os.getenv(\"STACKONE_ACCOUNT_ID\")\n\n    # Initialize the toolset\n    toolset = StackOneToolSet(api_key=api_key)\n\n    # Get HRIS tools\n    tools = toolset.get_tools(vertical=\"hris\", account_id=account_id)\n\n    # Use a specific tool\n    employee_tool = tools.get_tool(\"get_employee\")\n    if employee_tool:\n        employee = employee_tool.execute({\"id\": \"employee_id\"})\n        print(employee)\n</code></pre>"},{"location":"getting-started/#authentication","title":"Authentication","text":"<p>StackOne AI requires two key pieces of information: - <code>STACKONE_API_KEY</code>: Your API key from StackOne - <code>STACKONE_ACCOUNT_ID</code>: Your account ID</p> <p>You can set these as environment variables or pass them directly to the StackOneToolSet constructor.</p>"},{"location":"getting-started/#next-steps","title":"Next Steps","text":"<p>Check out some examples: - Basic Tool Usage - Error Handling - OpenAI Integration</p>"},{"location":"openai-integration/","title":"Openai Integration","text":"<pre><code>import asyncio\nimport os\n\nfrom dotenv import load_dotenv\nfrom openai import OpenAI\nfrom openai.types.chat import ChatCompletionMessage\nfrom stackone_ai import StackOneToolSet\nfrom stackone_ai.models import Tools\n</code></pre> <p>This example demonstrates how to use StackOne tools with OpenAI's function calling.</p> <p>The example shows: 1. Setting up StackOne tools for use with OpenAI 2. Converting tools to OpenAI's function format 3. Making chat completions with function calling 4. Handling tool execution results 5. Managing conversation context</p> <p>Example OpenAI function format: {     \"type\": \"function\",     \"function\": {         \"name\": \"get_weather\",         \"description\": \"Get current temperature for a given location.\",         \"parameters\": {             \"type\": \"object\",             \"properties\": {                 \"location\": {                     \"type\": \"string\",                     \"description\": \"City and country e.g. Bogot\u00e1, Colombia\"                 }             },             \"required\": [\"location\"],             \"additionalProperties\": False         },         \"strict\": True     } }</p> <p>Example tool call output: [     {         \"id\": \"call_12345xyz\",         \"type\": \"function\",         \"function\": {             \"name\": \"get_weather\",             \"arguments\": \"{\\\"location\\\":\\\"Paris, France\\\"}\"         }     } ]</p> <pre><code>async def handle_tool_calls(tools: Tools, tool_calls: list) -&gt; list[dict]:\n</code></pre> <p>Execute tool calls and return results</p> <pre><code>Args:\n    tools: Tools instance containing available tools\n    tool_calls: List of OpenAI tool calls\n\nReturns:\n    List of tool execution results\n</code></pre> <pre><code>results = []\n    for tool_call in tool_calls:\n        tool = tools.get_tool(tool_call.function.name)\n        if not tool:\n            print(f\"Warning: Tool {tool_call.function.name} not found\")\n            continue\n\n        result = tool.execute(tool_call.function.arguments)\n        results.append(result)\n    return results\n\n\nasync def process_chat_response(\n    client: OpenAI,\n    tools: Tools,\n    message: ChatCompletionMessage,\n    messages: list[dict],\n) -&gt; str:\n</code></pre> <p>Process chat completion response and handle any tool calls</p> <pre><code>Args:\n    client: OpenAI client\n    tools: Tools instance containing available tools\n    message: Message from chat completion\n    messages: List of conversation messages\n\nReturns:\n    Final response text\n</code></pre> <pre><code>if message.tool_calls:\n        # Execute the tool calls\n        results = await handle_tool_calls(tools, message.tool_calls)\n\n        if not results:\n            return \"Sorry, I couldn't find the appropriate tools to help with that.\"\n\n        # Add results to conversation\n        messages.append({\"role\": \"assistant\", \"content\": None, \"tool_calls\": message.tool_calls})\n        messages.append(\n            {\n                \"role\": \"tool\",\n                \"tool_call_id\": message.tool_calls[0].id,\n                \"content\": str(results[0]),\n            }\n        )\n\n        # Get final response\n        final_response = client.chat.completions.create(\n            model=\"gpt-4\",\n            messages=messages,\n        )\n        return final_response.choices[0].message.content\n\n    return message.content\n\n\nasync def main() -&gt; None:\n    # Load environment variables\n    load_dotenv()\n\n    api_key = os.getenv(\"STACKONE_API_KEY\")\n    account_id = os.getenv(\"STACKONE_ACCOUNT_ID\")\n    openai_api_key = os.getenv(\"OPENAI_API_KEY\")\n\n    if not all([api_key, account_id, openai_api_key]):\n        raise ValueError(\n            \"Missing required environment variables.\"\n            + \"Please set STACKONE_API_KEY, STACKONE_ACCOUNT_ID, and OPENAI_API_KEY\"\n        )\n\n    try:\n        # Initialize OpenAI and StackOne clients\n        client = OpenAI(api_key=openai_api_key)\n        toolset = StackOneToolSet(api_key=api_key)\n\n        # Get HRIS tools and convert to OpenAI format\n        tools = toolset.get_tools(vertical=\"hris\", account_id=account_id)\n        openai_tools = tools.to_openai()\n\n        # Example chat completion with tools\n        messages = [\n            {\"role\": \"system\", \"content\": \"You are a helpful HR assistant.\"},\n            {\n                \"role\": \"user\",\n                \"content\": \"Can you get me information about employee with ID:\"\n                + \"c28xIQaWQ6MzM5MzczMDA2NzMzMzkwNzIwNA?\",\n            },\n        ]\n\n        response = client.chat.completions.create(\n            model=\"gpt-4o-mini\",\n            messages=messages,\n            tools=openai_tools,\n            tool_choice=\"auto\",  # Let the model choose when to use tools\n        )\n\n        # Handle the response\n        result = await process_chat_response(client, tools, response.choices[0].message, messages)\n        print(\"Response:\", result)\n\n    except Exception as e:\n        print(f\"Error: {e}\")\n        raise\n\n\nif __name__ == \"__main__\":\n    asyncio.run(main())\n</code></pre>"}]}