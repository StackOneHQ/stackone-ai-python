{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"StackOne AI SDK","text":""},{"location":"#getting-started","title":"Getting Started","text":"<p>StackOne AI provides a unified interface for accessing various SaaS tools through AI-friendly APIs.</p>"},{"location":"#installation","title":"Installation","text":"<pre><code>pip install stackone-ai\n</code></pre>"},{"location":"#quick-start","title":"Quick Start","text":"<p>Here's a simple example. All examples are complete and runnable.</p> <pre><code>from dotenv import load_dotenv\nfrom stackone_ai import StackOneToolSet\n</code></pre>"},{"location":"#authenticate-with-stackone","title":"Authenticate with StackOne","text":"<pre><code>export STACKONE_API_KEY=&lt;your-api-key&gt;\n</code></pre> <p>or load from a .env file:</p> <pre><code>load_dotenv()\n</code></pre>"},{"location":"#account-ids","title":"Account IDs","text":"<p>StackOne uses account IDs to identify different integrations. See the example stackone_account_ids.py for more details. This example will hardcode the account ID.</p> <pre><code>account_id = \"45072196112816593343\"\nemployee_id = \"c28xIQaWQ6MzM5MzczMDA2NzMzMzkwNzIwNA\"\n\n\ndef quickstart():\n    toolset = StackOneToolSet()\n\n    # Filter by vertical and add the account ID\n    tools = toolset.get_tools(vertical=\"hris\", account_id=account_id)\n\n    # Use a specific tool\n    employee_tool = tools.get_tool(\"get_employee\")\n    if employee_tool:\n        employee = employee_tool.execute({\"id\": employee_id})\n        print(employee)\n\n\nif __name__ == \"__main__\":\n    quickstart()\n</code></pre>"},{"location":"#next-steps","title":"Next Steps","text":"<p>Check out some examples: - Error Handling - StackOne Account IDs - Available Tools - OpenAI Integration - LangChain Integration - CrewAI Integration - LangGraph Tool Node</p>"},{"location":"available-tools/","title":"Available Tools","text":"<p>Get available tools from your StackOne organisation based on the account id.</p> <pre><code>uv run examples/available_tools.py\n</code></pre> <pre><code># TODO: Add examples\ndef get_available_tools():\n    print(\"Getting available tools\")\n\n\nif __name__ == \"__main__\":\n    print(get_available_tools())\n</code></pre>"},{"location":"crewai-integration/","title":"Crewai Integration","text":"<p>This example demonstrates how to use StackOne tools with CrewAI.</p> <p>CrewAI uses LangChain tools natively.</p> <pre><code>uv run examples/crewai_integration.py\n</code></pre> <pre><code>from crewai import Agent, Crew, Task\nfrom stackone_ai import StackOneToolSet\n\naccount_id = \"45072196112816593343\"\nemployee_id = \"c28xIQaWQ6MzM5MzczMDA2NzMzMzkwNzIwNA\"\n\n\ndef crewai_integration():\n    toolset = StackOneToolSet()\n    tools = toolset.get_tools(\n        vertical=\"hris\",\n        account_id=account_id,\n    )\n\n    # CrewAI uses LangChain tools natively\n    langchain_tools = tools.to_langchain()\n\n    agent = Agent(\n        role=\"HR Manager\",\n        goal=f\"What is the employee with the id {employee_id}?\",\n        backstory=\"With over 10 years of experience in HR and employee management, \"\n        \"you excel at finding patterns in complex datasets.\",\n        llm=\"gpt-4o-mini\",\n        tools=langchain_tools,\n        max_iter=2,\n    )\n\n    task = Task(\n        description=\"What is the employee with the id c28xIQaWQ6MzM5MzczMDA2NzMzMzkwNzIwNA?\",\n        agent=agent,\n        expected_output=\"A JSON object containing the employee's information\",\n    )\n\n    crew = Crew(agents=[agent], tasks=[task])\n    print(crew.kickoff())\n\n\nif __name__ == \"__main__\":\n    crewai_integration()\n</code></pre>"},{"location":"error-handling/","title":"Error Handling","text":"<pre><code>from dotenv import load_dotenv\nfrom stackone_ai import StackOneToolSet\n\nload_dotenv()\n\n\ndef error_handling() -&gt; None:\n    toolset = StackOneToolSet()\n\n    # Example 1: Handle unknown vertical\n    tools = toolset.get_tools(vertical=\"unknown_vertical\")\n    print(\"Tools for unknown vertical:\", tools._tool_map)\n    # {}\n\n    # Example 2: Handle API errors with account_id\n    tools = toolset.get_tools(vertical=\"crm\", account_id=\"test_id\")\n    try:\n        # Try with invalid ID\n        contacts_tool = tools.get_tool(\"get_contact\")\n        if contacts_tool:\n            result = contacts_tool.execute({\"id\": \"invalid_id\"})\n    except Exception as e:\n        print(f\"API Error: {e}\")\n        # 400 Client Error: Bad Request for url: https://api.stackone.com/unified/crm/contacts/invalid_id\n\n    # Example 3: Handle missing account ID\n    tools_no_account = toolset.get_tools(vertical=\"crm\", account_id=None)\n    try:\n        list_contacts_tool = tools_no_account.get_tool(\"list_contacts\")\n        if list_contacts_tool:\n            result = list_contacts_tool.execute()\n            print(\"Result without account ID:\", result)\n    except Exception as e:\n        print(f\"Error when account ID is missing: {e}\")\n        # 501 Server Error: Not Implemented for url: https://api.stackone.com/unified/crm/contacts\n\n\nif __name__ == \"__main__\":\n    error_handling()\n</code></pre>"},{"location":"langchain-integration/","title":"Langchain Integration","text":"<p>This example demonstrates how to use StackOne tools with LangChain.</p> <pre><code>uv run examples/langchain_integration.py\n</code></pre> <pre><code>from dotenv import load_dotenv\nfrom langchain_openai import ChatOpenAI\nfrom stackone_ai import StackOneToolSet\n\nload_dotenv()\n\naccount_id = \"45072196112816593343\"\nemployee_id = \"c28xIQaWQ6MzM5MzczMDA2NzMzMzkwNzIwNA\"\n\n\ndef langchain_integration() -&gt; None:\n    toolset = StackOneToolSet()\n    tools = toolset.get_tools(vertical=\"hris\", account_id=account_id)\n\n    langchain_tools = tools.to_langchain()\n\n    model = ChatOpenAI(model=\"gpt-4o-mini\")\n    model_with_tools = model.bind_tools(langchain_tools)\n\n    result = model_with_tools.invoke(f\"Can you get me information about employee with ID: {employee_id}?\")\n\n    if result.tool_calls:\n        for tool_call in result.tool_calls:\n            tool = tools.get_tool(tool_call[\"name\"])\n            if tool:\n                print(tool.execute(tool_call[\"args\"]))\n\n\nif __name__ == \"__main__\":\n    langchain_integration()\n</code></pre>"},{"location":"langgraph-tool-node/","title":"Langgraph Tool Node","text":"<p>This example demonstrates how to use StackOne tools with LangGraph.</p> <pre><code>uv run examples/langgraph_tool_node.py\n</code></pre> <pre><code># TODO: Add examples\ndef langgraph_tool_node() -&gt; None:\n    print(\"LangGraph tool node\")\n\n\nif __name__ == \"__main__\":\n    langgraph_tool_node()\n</code></pre>"},{"location":"openai-integration/","title":"Openai Integration","text":"<p>This example demonstrates how to use StackOne tools with OpenAI's function calling.</p> <pre><code>uv run examples/openai_integration.py\n</code></pre> <pre><code>from dotenv import load_dotenv\nfrom openai import OpenAI\nfrom stackone_ai import StackOneToolSet\n\nload_dotenv()\n\naccount_id = \"45072196112816593343\"\nemployee_id = \"c28xIQaWQ6MzM5MzczMDA2NzMzMzkwNzIwNA\"\n\n\ndef handle_tool_calls(tools, tool_calls) -&gt; list[dict]:\n    results = []\n    for tool_call in tool_calls:\n        tool = tools.get_tool(tool_call.function.name)\n        if tool:\n            results.append(tool.execute(tool_call.function.arguments))\n    return results\n\n\ndef openai_integration() -&gt; None:\n    client = OpenAI()\n    toolset = StackOneToolSet()\n    tools = toolset.get_tools(vertical=\"hris\", account_id=account_id)\n    openai_tools = tools.to_openai()\n\n    messages = [\n        {\"role\": \"system\", \"content\": \"You are a helpful HR assistant.\"},\n        {\n            \"role\": \"user\",\n            \"content\": f\"Can you get me information about employee with ID: {employee_id}?\",\n        },\n    ]\n\n    while True:\n        response = client.chat.completions.create(\n            model=\"gpt-4o-mini\",\n            messages=messages,\n            tools=openai_tools,\n            tool_choice=\"auto\",\n        )\n\n        if not response.choices[0].message.tool_calls:\n            print(\"Response:\", response.choices[0].message.content)\n            break\n\n        results = handle_tool_calls(tools, response.choices[0].message.tool_calls)\n        if not results:\n            print(\"Error: Failed to execute tools\")\n            break\n\n        messages.extend(\n            [\n                {\"role\": \"assistant\", \"content\": None, \"tool_calls\": response.choices[0].message.tool_calls},\n                {\n                    \"role\": \"tool\",\n                    \"tool_call_id\": response.choices[0].message.tool_calls[0].id,\n                    \"content\": str(results[0]),\n                },\n            ]\n        )\n\n\nif __name__ == \"__main__\":\n    openai_integration()\n</code></pre>"},{"location":"stackone-account-ids/","title":"Stackone Account Ids","text":"<p>Handling StackOne account IDs with the StackOne Tools.</p> <pre><code>uv run examples/stackone_account_ids.py\n</code></pre> <pre><code>from dotenv import load_dotenv\nfrom stackone_ai import StackOneToolSet\n\nload_dotenv()\n\n\ndef stackone_account_ids():\n    toolset = StackOneToolSet()\n\n    # Filter by vertical and set the account ID\n    tools = toolset.get_tools(vertical=\"hris\", account_id=\"test_id\")\n\n    # You can over write the account ID here..\n    tools.set_account_id(\"a_different_id\")\n\n    employee_tool = tools.get_tool(\"get_employee\")\n    if employee_tool:\n        # You can even set the account ID on a per-tool basis\n        employee_tool.set_account_id(\"again_another_id\")\n\n        print(employee_tool.get_account_id())\n\n\nif __name__ == \"__main__\":\n    stackone_account_ids()\n</code></pre>"}]}