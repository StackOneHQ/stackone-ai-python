{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"StackOne AI SDK","text":""},{"location":"#getting-started","title":"Getting Started","text":"<p>StackOne AI provides a unified interface for accessing various SaaS tools through AI-friendly APIs.</p>"},{"location":"#installation","title":"Installation","text":"<pre><code>pip install stackone-ai\n</code></pre>"},{"location":"#quick-start","title":"Quick Start","text":"<p>Here's a simple example. All examples are complete and runnable.</p> <p>You can even run the example directly from the command line:</p> <pre><code>uv run examples/index.py\n</code></pre> <pre><code>from dotenv import load_dotenv\n\nfrom stackone_ai import StackOneToolSet\n</code></pre>"},{"location":"#authenticate-with-stackone","title":"Authenticate with StackOne","text":"<pre><code>export STACKONE_API_KEY=&lt;your-api-key&gt;\n</code></pre> <p>or load from a .env file:</p> <pre><code>load_dotenv()\n</code></pre>"},{"location":"#account-ids","title":"Account IDs","text":"<p>StackOne uses account IDs to identify different integrations. See the example stackone_account_ids.py for more details. This example will hardcode the account ID.</p> <pre><code>account_id = \"45072196112816593343\"\nemployee_id = \"c28xIQaWQ6MzM5MzczMDA2NzMzMzkwNzIwNA\"\n\n\ndef quickstart():\n    toolset = StackOneToolSet()\n\n    # Get all HRIS-related tools\n    tools = toolset.get_tools(\"hris_*\", account_id=account_id)\n\n    # Use a specific tool\n    employee_tool = tools.get_tool(\"hris_get_employee\")\n    assert employee_tool is not None\n\n    employee = employee_tool.execute({\"id\": employee_id})\n    assert employee is not None\n\n\nif __name__ == \"__main__\":\n    quickstart()\n</code></pre>"},{"location":"#next-steps","title":"Next Steps","text":"<p>Check out some more documentation:</p> <ul> <li>Error Handling</li> <li>StackOne Account IDs</li> <li>Available Tools</li> <li>File Uploads</li> </ul> <p>Or get started with an integration:</p> <ul> <li>OpenAI Integration</li> <li>LangChain Integration</li> <li>CrewAI Integration</li> <li>LangGraph Tool Node</li> </ul>"},{"location":"available-tools/","title":"Available Tools","text":"<p>Get available tools from your StackOne organisation based on the account id.</p> <p>This example demonstrates different ways to filter and organize tools: 1. Getting all available tools 2. Filtering by vertical 3. Using multiple patterns for cross-vertical functionality 4. Filtering by specific operations 5. Combining multiple operation patterns</p>"},{"location":"available-tools/#todo-experimental-get_available_toolsaccount_idyour_account_id","title":"TODO: experimental - get_available_tools(account_id=\"your_account_id\")","text":"<pre><code>uv run examples/available_tools.py\n</code></pre> <pre><code>from dotenv import load_dotenv\n\nfrom stackone_ai import StackOneToolSet\n\nload_dotenv()\n\n\ndef get_available_tools() -&gt; None:\n    toolset = StackOneToolSet()\n\n    # First, get all tools\n    all_tools = toolset.get_tools()\n    assert len(all_tools) &gt; 100, \"Expected at least 100 tools in total\"\n\n    # Then, let's get just HRIS tools using a vertical filter\n    hris_tools = toolset.get_tools(\"hris_*\")\n    assert len(hris_tools) &gt; 10, \"Expected at least 10 HRIS tools\"\n\n    # Now, let's get people-related tools across verticals\n    people_tools = toolset.get_tools(\n        [\n            \"hris_*employee*\",\n            \"crm_*contact*\",\n        ]\n    )\n    assert len(people_tools) &gt; 20, \"Expected at least 20 people-related tools\"\n    for tool in people_tools:\n        assert \"employee\" in tool.name or \"contact\" in tool.name, (\n            f\"Tool {tool.name} doesn't contain 'employee' or 'contact'\"\n        )\n\n    # We can also filter by specific operations across all verticals\n    upload_tools = toolset.get_tools(\"*upload*\")\n    assert len(upload_tools) &gt; 0, \"Expected at least one upload tool\"\n    for tool in upload_tools:\n        assert \"upload\" in tool.name.lower(), f\"Tool {tool.name} doesn't contain 'upload'\"\n\n    # Get all tools except HRIS\n    non_hris_tools = toolset.get_tools(\"!hris_*\")\n    assert len(non_hris_tools) &gt; 0, \"Expected at least one non-HRIS tool\"\n    for tool in non_hris_tools:\n        assert not tool.name.startswith(\"hris_\"), f\"Tool {tool.name} should not be an HRIS tool\"\n\n    # Complex filtering with positive and negative patterns\n    list_tools = toolset.get_tools(\n        [\n            \"*list*\",  # Include list operations\n            \"*search*\",  # Include search operations\n            \"!*delete*\",  # Exclude delete operations\n            \"!*remove*\",  # Exclude remove operations\n        ]\n    )\n    assert len(list_tools) &gt; 0, \"Expected at least one list/search tool\"\n    for tool in list_tools:\n        # Should match positive patterns\n        assert any(op in tool.name.lower() for op in [\"list\", \"search\"]), (\n            f\"Tool {tool.name} doesn't contain 'list' or 'search'\"\n        )\n        # Should not match negative patterns\n        assert not any(op in tool.name.lower() for op in [\"delete\", \"remove\"]), (\n            f\"Tool {tool.name} contains excluded operation\"\n        )\n\n\nif __name__ == \"__main__\":\n    get_available_tools()\n</code></pre>"},{"location":"crewai-integration/","title":"Crewai Integration","text":"<p>This example demonstrates how to use StackOne tools with CrewAI.</p> <p>CrewAI uses LangChain tools natively.</p> <pre><code>uv run examples/crewai_integration.py\n</code></pre> <pre><code>from crewai import Agent, Crew, Task\n\nfrom stackone_ai import StackOneToolSet\n\naccount_id = \"45072196112816593343\"\nemployee_id = \"c28xIQaWQ6MzM5MzczMDA2NzMzMzkwNzIwNA\"\n\n\ndef crewai_integration():\n    toolset = StackOneToolSet()\n    tools = toolset.get_tools(\"hris_*\", account_id=account_id)\n\n    # CrewAI uses LangChain tools natively\n    langchain_tools = tools.to_langchain()\n    assert len(langchain_tools) &gt; 0, \"Expected at least one LangChain tool\"\n\n    for tool in langchain_tools:\n        assert hasattr(tool, \"name\"), \"Expected tool to have name\"\n        assert hasattr(tool, \"description\"), \"Expected tool to have description\"\n        assert hasattr(tool, \"_run\"), \"Expected tool to have _run method\"\n\n    agent = Agent(\n        role=\"HR Manager\",\n        goal=f\"What is the employee with the id {employee_id}?\",\n        backstory=\"With over 10 years of experience in HR and employee management, \"\n        \"you excel at finding patterns in complex datasets.\",\n        llm=\"gpt-4o-mini\",\n        tools=langchain_tools,\n        max_iter=2,\n    )\n\n    task = Task(\n        description=\"What is the employee with the id c28xIQaWQ6MzM5MzczMDA2NzMzMzkwNzIwNA?\",\n        agent=agent,\n        expected_output=\"A JSON object containing the employee's information\",\n    )\n\n    crew = Crew(agents=[agent], tasks=[task])\n\n    result = crew.kickoff()\n    assert result is not None, \"Expected result to be returned\"\n\n\nif __name__ == \"__main__\":\n    crewai_integration()\n</code></pre>"},{"location":"error-handling/","title":"Error Handling","text":"<p>This example demonstrates error handling when using the StackOne SDK.</p> <p>Run the following command to see the output:</p> <pre><code>uv run examples/error_handling.py\n</code></pre> <pre><code>import os\n\nfrom dotenv import load_dotenv\n\nfrom stackone_ai import StackOneToolSet\nfrom stackone_ai.models import StackOneAPIError\nfrom stackone_ai.toolset import ToolsetConfigError, ToolsetLoadError\n\nload_dotenv()\n\n\ndef error_handling() -&gt; None:\n    # Example 1: Configuration error - missing API key\n    original_api_key = os.environ.pop(\"STACKONE_API_KEY\", None)\n    try:\n        try:\n            StackOneToolSet(api_key=None)\n            raise AssertionError(\"Expected ToolsetConfigError\")\n        except ToolsetConfigError as e:\n            assert (\n                str(e)\n                == \"API key must be provided either through api_key parameter or STACKONE_API_KEY environment variable\"\n            )\n    finally:\n        if original_api_key:\n            os.environ[\"STACKONE_API_KEY\"] = original_api_key\n\n    # Example 2: Invalid vertical error\n    toolset = StackOneToolSet()\n    try:\n        # Use a non-existent vertical to trigger error\n        tools = toolset.get_tools(\"nonexistent_vertical_*\")\n        # If we get here, no tools were found but no error was raised\n        assert len(tools) == 0, \"Expected no tools for nonexistent vertical\"\n    except ToolsetLoadError as e:\n        assert \"Error loading tools\" in str(e)\n\n    # Example 3: API error - invalid request\n    toolset = StackOneToolSet()\n    tools = toolset.get_tools(\"crm_*\")\n\n    # Try to make an API call without required parameters\n    list_contacts = tools.get_tool(\"crm_list_contacts\")\n    assert list_contacts is not None, \"Expected crm_list_contacts tool to exist\"\n\n    try:\n        # Execute without required parameters should raise error\n        list_contacts.execute({})\n        raise AssertionError(\"Expected StackOneAPIError\")\n    except StackOneAPIError as e:\n        assert e.status_code &gt;= 400, \"Expected error status code\"\n        assert e.response_body is not None, \"Expected error response body\"\n\n\nif __name__ == \"__main__\":\n    error_handling()\n</code></pre>"},{"location":"file-uploads/","title":"File Uploads","text":"<p>Example demonstrating file upload functionality with StackOne. Shows how to upload an employee document using the HRIS integration.</p> <p>This example is runnable with the following command: <pre><code>uv run examples/file_upload_example.py\n</code></pre></p> <pre><code>import base64\nimport tempfile\nfrom pathlib import Path\n\nfrom dotenv import load_dotenv\n\nfrom stackone_ai import StackOneToolSet\n\nload_dotenv()\n\naccount_id = \"45072196112816593343\"\nemployee_id = \"c28xIQaWQ6MzM5MzczMDA2NzMzMzkwNzIwNA\"\n\n\ndef upload_employee_document() -&gt; None:\n</code></pre> <p>Demonstrate uploading an employee document using StackOne.</p> <pre><code>with tempfile.TemporaryDirectory() as temp_dir:\n        resume_content =\n</code></pre> <p>JOHN DOE         Software Engineer</p> <pre><code>    EXPERIENCE\n    Senior Developer - Tech Corp\n    2020-Present\n    - Led development of core features\n    - Managed team of 5 engineers\n\n    EDUCATION\n    BS Computer Science\n    University of Technology\n    2016-2020\n</code></pre> <pre><code>resume_file = Path(temp_dir) / \"resume.pdf\"\n        resume_file.write_text(resume_content)\n\n        toolset = StackOneToolSet()\n        tools = toolset.get_tools(\"hris_*\", account_id=account_id)\n\n        upload_tool = tools.get_tool(\"hris_upload_employee_document\")\n        assert upload_tool is not None\n\n        with open(resume_file, \"rb\") as f:\n            file_content = base64.b64encode(f.read()).decode()\n\n        upload_params = {\n            \"x-account-id\": account_id,\n            \"id\": employee_id,\n            \"name\": \"resume\",\n            \"content\": file_content,\n            \"category\": {\"value\": \"shared\"},\n            \"file_format\": {\"value\": \"txt\"},\n        }\n\n        result = upload_tool.execute(upload_params)\n        assert result is not None\n        assert result.get(\"message\") == \"File uploaded successfully\"\n\n\nif __name__ == \"__main__\":\n    upload_employee_document()\n</code></pre>"},{"location":"langchain-integration/","title":"Langchain Integration","text":"<p>This example demonstrates how to use StackOne tools with LangChain.</p> <pre><code>uv run examples/langchain_integration.py\n</code></pre> <pre><code>from dotenv import load_dotenv\nfrom langchain_openai import ChatOpenAI\n\nfrom stackone_ai import StackOneToolSet\n\nload_dotenv()\n\naccount_id = \"45072196112816593343\"\nemployee_id = \"c28xIQaWQ6MzM5MzczMDA2NzMzMzkwNzIwNA\"\n\n\ndef langchain_integration() -&gt; None:\n    toolset = StackOneToolSet()\n    tools = toolset.get_tools(\"hris_*\", account_id=account_id)\n\n    # Convert to LangChain format and verify\n    langchain_tools = tools.to_langchain()\n    assert len(langchain_tools) &gt; 0, \"Expected at least one LangChain tool\"\n\n    # Verify tool structure\n    for tool in langchain_tools:\n        assert hasattr(tool, \"name\"), \"Expected tool to have name\"\n        assert hasattr(tool, \"description\"), \"Expected tool to have description\"\n        assert hasattr(tool, \"_run\"), \"Expected tool to have _run method\"\n        assert hasattr(tool, \"args_schema\"), \"Expected tool to have args_schema\"\n\n    # Create model with tools\n    model = ChatOpenAI(model=\"gpt-4o-mini\")\n    model_with_tools = model.bind_tools(langchain_tools)\n\n    result = model_with_tools.invoke(f\"Can you get me information about employee with ID: {employee_id}?\")\n\n    if result.tool_calls:\n        for tool_call in result.tool_calls:\n            tool = tools.get_tool(tool_call[\"name\"])\n            if tool:\n                result = tool.execute(tool_call[\"args\"])\n                assert result is not None\n                assert result.get(\"data\") is not None\n\n\nif __name__ == \"__main__\":\n    langchain_integration()\n</code></pre>"},{"location":"langgraph-tool-node/","title":"Langgraph Tool Node","text":"<p>TODO!!</p> <p>This example demonstrates how to use StackOne tools with LangGraph.</p> <pre><code>uv run examples/langgraph_tool_node.py\n</code></pre> <pre><code>from dotenv import load_dotenv\n\nfrom stackone_ai import StackOneToolSet\n\nload_dotenv()\n\naccount_id = \"45072196112816593343\"\nemployee_id = \"c28xIQaWQ6MzM5MzczMDA2NzMzMzkwNzIwNA\"\n\n\ndef langgraph_tool_node() -&gt; None:\n</code></pre> <p>Demonstrate basic LangGraph integration with StackOne tools.</p> <pre><code>toolset = StackOneToolSet()\n    tools = toolset.get_tools(\"hris_*\", account_id=account_id)\n\n    # Verify we have the tools we need\n    assert len(tools) &gt; 0, \"Expected at least one HRIS tool\"\n    employee_tool = tools.get_tool(\"hris_get_employee\")\n    assert employee_tool is not None, \"Expected hris_get_employee tool\"\n\n    # TODO: Add LangGraph specific integration\n    # For now, just verify the tools are properly configured\n    langchain_tools = tools.to_langchain()\n    assert len(langchain_tools) &gt; 0, \"Expected LangChain tools\"\n    assert all(hasattr(tool, \"_run\") for tool in langchain_tools), \"Expected all tools to have _run method\"\n\n\nif __name__ == \"__main__\":\n    langgraph_tool_node()\n</code></pre>"},{"location":"openai-integration/","title":"Openai Integration","text":"<p>This example demonstrates how to use StackOne tools with OpenAI's function calling.</p> <p>This example is runnable with the following command: <pre><code>uv run examples/openai_integration.py\n</code></pre></p> <p>You can find out more about the OpenAI Function Calling API format here.</p> <pre><code>from dotenv import load_dotenv\nfrom openai import OpenAI\n\nfrom stackone_ai import StackOneToolSet\n\nload_dotenv()\n\naccount_id = \"45072196112816593343\"\nemployee_id = \"c28xIQaWQ6MzM5MzczMDA2NzMzMzkwNzIwNA\"\n\n\ndef handle_tool_calls(tools, tool_calls) -&gt; list[dict]:\n    results = []\n    for tool_call in tool_calls:\n        tool = tools.get_tool(tool_call.function.name)\n        if tool:\n            results.append(tool.execute(tool_call.function.arguments))\n    return results\n\n\ndef openai_integration() -&gt; None:\n    client = OpenAI()\n    toolset = StackOneToolSet()\n\n    # Filter tools to only the ones we need to avoid context window limits\n    tools = toolset.get_tools(\n        [\n            \"hris_get_employee\",\n            \"hris_list_employee_employments\",\n            \"hris_get_employee_employment\",\n        ],\n        account_id=account_id,\n    )\n    openai_tools = tools.to_openai()\n\n    messages = [\n        {\"role\": \"system\", \"content\": \"You are a helpful HR assistant.\"},\n        {\n            \"role\": \"user\",\n            \"content\": f\"Can you get me information about employee with ID: {employee_id}?\",\n        },\n    ]\n\n    response = client.chat.completions.create(\n        model=\"gpt-4o-mini\",\n        messages=messages,\n        tools=openai_tools,\n        tool_choice=\"auto\",\n    )\n\n    # Verify we got a response with tool calls\n    assert response.choices[0].message.tool_calls is not None, \"Expected tool calls in response\"\n\n    # Handle the tool calls and verify results\n    results = handle_tool_calls(tools, response.choices[0].message.tool_calls)\n    assert results is not None and len(results) &gt; 0, \"Expected tool call results\"\n    assert \"data\" in results[0], \"Expected data in tool call result\"\n\n    # Verify we can continue the conversation with the results\n    messages.extend(\n        [\n            {\"role\": \"assistant\", \"content\": None, \"tool_calls\": response.choices[0].message.tool_calls},\n            {\n                \"role\": \"tool\",\n                \"tool_call_id\": response.choices[0].message.tool_calls[0].id,\n                \"content\": str(results[0]),\n            },\n        ]\n    )\n\n    # Verify the final response\n    final_response = client.chat.completions.create(\n        model=\"gpt-4o-mini\",\n        messages=messages,\n        tools=openai_tools,\n        tool_choice=\"auto\",\n    )\n    assert final_response.choices[0].message.content is not None, \"Expected final response content\"\n\n\nif __name__ == \"__main__\":\n    openai_integration()\n</code></pre>"},{"location":"stackone-account-ids/","title":"Stackone Account Ids","text":"<p>Handling StackOne account IDs with the StackOne Tools.</p> <pre><code>uv run examples/stackone_account_ids.py\n</code></pre> <pre><code>from dotenv import load_dotenv\n\nfrom stackone_ai import StackOneToolSet\n\nload_dotenv()\n\n\ndef stackone_account_ids():\n    toolset = StackOneToolSet()\n\n    # Filter by pattern and set the account ID\n    tools = toolset.get_tools(\"hris_*\", account_id=\"test_id\")\n\n    # You can over write the account ID here..\n    tools.set_account_id(\"a_different_id\")\n\n    employee_tool = tools.get_tool(\"hris_get_employee\")\n    assert employee_tool is not None\n\n    # You can even set the account ID on a per-tool basis\n    employee_tool.set_account_id(\"again_another_id\")\n    assert employee_tool.get_account_id() == \"again_another_id\"\n\n\nif __name__ == \"__main__\":\n    stackone_account_ids()\n</code></pre>"}]}